# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chord_pb2 as chord__pb2


class RegistryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegistryRegister = channel.unary_unary(
                '/RegistryService/RegistryRegister',
                request_serializer=chord__pb2.RegisterMessage.SerializeToString,
                response_deserializer=chord__pb2.RegisterMessageResponse.FromString,
                )
        self.RegistryDeregister = channel.unary_unary(
                '/RegistryService/RegistryDeregister',
                request_serializer=chord__pb2.DeregisterMessage.SerializeToString,
                response_deserializer=chord__pb2.DeregisterMessageResponse.FromString,
                )
        self.RegistryGetChordInfo = channel.unary_unary(
                '/RegistryService/RegistryGetChordInfo',
                request_serializer=chord__pb2.GetChordInfoMessage.SerializeToString,
                response_deserializer=chord__pb2.GetChordInfoMessageResponse.FromString,
                )
        self.RegistryGetFingerTable = channel.unary_unary(
                '/RegistryService/RegistryGetFingerTable',
                request_serializer=chord__pb2.GetFingerTablFromRegistryMessage.SerializeToString,
                response_deserializer=chord__pb2.GetFingerTableFromRegistryMessageResponse.FromString,
                )
        self.RegistryGetPredecessor = channel.unary_unary(
                '/RegistryService/RegistryGetPredecessor',
                request_serializer=chord__pb2.GetPredecessorMessage.SerializeToString,
                response_deserializer=chord__pb2.GetPredecessorMessageResponse.FromString,
                )
        self.RegistryGetSuccessor = channel.unary_unary(
                '/RegistryService/RegistryGetSuccessor',
                request_serializer=chord__pb2.GetSuccessorMessage.SerializeToString,
                response_deserializer=chord__pb2.GetSuccessorMessageResponse.FromString,
                )


class RegistryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegistryRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistryDeregister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistryGetChordInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistryGetFingerTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistryGetPredecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistryGetSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegistryRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistryRegister,
                    request_deserializer=chord__pb2.RegisterMessage.FromString,
                    response_serializer=chord__pb2.RegisterMessageResponse.SerializeToString,
            ),
            'RegistryDeregister': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistryDeregister,
                    request_deserializer=chord__pb2.DeregisterMessage.FromString,
                    response_serializer=chord__pb2.DeregisterMessageResponse.SerializeToString,
            ),
            'RegistryGetChordInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistryGetChordInfo,
                    request_deserializer=chord__pb2.GetChordInfoMessage.FromString,
                    response_serializer=chord__pb2.GetChordInfoMessageResponse.SerializeToString,
            ),
            'RegistryGetFingerTable': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistryGetFingerTable,
                    request_deserializer=chord__pb2.GetFingerTablFromRegistryMessage.FromString,
                    response_serializer=chord__pb2.GetFingerTableFromRegistryMessageResponse.SerializeToString,
            ),
            'RegistryGetPredecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistryGetPredecessor,
                    request_deserializer=chord__pb2.GetPredecessorMessage.FromString,
                    response_serializer=chord__pb2.GetPredecessorMessageResponse.SerializeToString,
            ),
            'RegistryGetSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistryGetSuccessor,
                    request_deserializer=chord__pb2.GetSuccessorMessage.FromString,
                    response_serializer=chord__pb2.GetSuccessorMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RegistryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegistryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegistryRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegistryService/RegistryRegister',
            chord__pb2.RegisterMessage.SerializeToString,
            chord__pb2.RegisterMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegistryDeregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegistryService/RegistryDeregister',
            chord__pb2.DeregisterMessage.SerializeToString,
            chord__pb2.DeregisterMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegistryGetChordInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegistryService/RegistryGetChordInfo',
            chord__pb2.GetChordInfoMessage.SerializeToString,
            chord__pb2.GetChordInfoMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegistryGetFingerTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegistryService/RegistryGetFingerTable',
            chord__pb2.GetFingerTablFromRegistryMessage.SerializeToString,
            chord__pb2.GetFingerTableFromRegistryMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegistryGetPredecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegistryService/RegistryGetPredecessor',
            chord__pb2.GetPredecessorMessage.SerializeToString,
            chord__pb2.GetPredecessorMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegistryGetSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RegistryService/RegistryGetSuccessor',
            chord__pb2.GetSuccessorMessage.SerializeToString,
            chord__pb2.GetSuccessorMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class NodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NodeGetFingerTable = channel.unary_unary(
                '/NodeService/NodeGetFingerTable',
                request_serializer=chord__pb2.GetFingerTableMessage.SerializeToString,
                response_deserializer=chord__pb2.GetFingerTableMessageResponse.FromString,
                )
        self.NodeSave = channel.unary_unary(
                '/NodeService/NodeSave',
                request_serializer=chord__pb2.SaveMessage.SerializeToString,
                response_deserializer=chord__pb2.SaveMessageResponse.FromString,
                )
        self.NodeRemove = channel.unary_unary(
                '/NodeService/NodeRemove',
                request_serializer=chord__pb2.RemoveMessage.SerializeToString,
                response_deserializer=chord__pb2.RemoveMessageResponse.FromString,
                )
        self.NodeFind = channel.unary_unary(
                '/NodeService/NodeFind',
                request_serializer=chord__pb2.FindMessage.SerializeToString,
                response_deserializer=chord__pb2.FindMessageResponse.FromString,
                )


class NodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NodeGetFingerTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeSave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeRemove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeFind(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NodeGetFingerTable': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeGetFingerTable,
                    request_deserializer=chord__pb2.GetFingerTableMessage.FromString,
                    response_serializer=chord__pb2.GetFingerTableMessageResponse.SerializeToString,
            ),
            'NodeSave': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeSave,
                    request_deserializer=chord__pb2.SaveMessage.FromString,
                    response_serializer=chord__pb2.SaveMessageResponse.SerializeToString,
            ),
            'NodeRemove': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeRemove,
                    request_deserializer=chord__pb2.RemoveMessage.FromString,
                    response_serializer=chord__pb2.RemoveMessageResponse.SerializeToString,
            ),
            'NodeFind': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeFind,
                    request_deserializer=chord__pb2.FindMessage.FromString,
                    response_serializer=chord__pb2.FindMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NodeGetFingerTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NodeService/NodeGetFingerTable',
            chord__pb2.GetFingerTableMessage.SerializeToString,
            chord__pb2.GetFingerTableMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeSave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NodeService/NodeSave',
            chord__pb2.SaveMessage.SerializeToString,
            chord__pb2.SaveMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeRemove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NodeService/NodeRemove',
            chord__pb2.RemoveMessage.SerializeToString,
            chord__pb2.RemoveMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeFind(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NodeService/NodeFind',
            chord__pb2.FindMessage.SerializeToString,
            chord__pb2.FindMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
