# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chord_pb2 as chord__pb2


class ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegistryRegister = channel.unary_unary(
                '/Service/RegistryRegister',
                request_serializer=chord__pb2.RegisterMessage.SerializeToString,
                response_deserializer=chord__pb2.RegisterMessageResponse.FromString,
                )
        self.RegistryDeregister = channel.unary_unary(
                '/Service/RegistryDeregister',
                request_serializer=chord__pb2.DeregisterMessage.SerializeToString,
                response_deserializer=chord__pb2.DeregisterMessageResponse.FromString,
                )
        self.RegistryGetChordInfo = channel.unary_unary(
                '/Service/RegistryGetChordInfo',
                request_serializer=chord__pb2.GetChordInfoMessage.SerializeToString,
                response_deserializer=chord__pb2.GetChordInfoMessageResponse.FromString,
                )
        self.RegistryPopulateFingerTable = channel.unary_unary(
                '/Service/RegistryPopulateFingerTable',
                request_serializer=chord__pb2.PopulateFingerTableRegistryMessage.SerializeToString,
                response_deserializer=chord__pb2.PopulateFingerTableRegistryMessageResponse.FromString,
                )
        self.Identify = channel.unary_unary(
                '/Service/Identify',
                request_serializer=chord__pb2.IdentifyMessage.SerializeToString,
                response_deserializer=chord__pb2.IdentifyMessageResponse.FromString,
                )
        self.GiveDataToSuccessor = channel.unary_unary(
                '/Service/GiveDataToSuccessor',
                request_serializer=chord__pb2.GiveDataToSuccessorMessage.SerializeToString,
                response_deserializer=chord__pb2.GiveDataToSuccessorMessageResponse.FromString,
                )
        self.GetDataFromSuccessor = channel.unary_unary(
                '/Service/GetDataFromSuccessor',
                request_serializer=chord__pb2.GetDataFromSuccessorMessage.SerializeToString,
                response_deserializer=chord__pb2.GetDataFromSuccessorMessageResponse.FromString,
                )
        self.NodeGetFingerTable = channel.unary_unary(
                '/Service/NodeGetFingerTable',
                request_serializer=chord__pb2.GetFingerTableMessage.SerializeToString,
                response_deserializer=chord__pb2.GetFingerTableMessageResponse.FromString,
                )
        self.NodeSave = channel.unary_unary(
                '/Service/NodeSave',
                request_serializer=chord__pb2.SaveMessage.SerializeToString,
                response_deserializer=chord__pb2.SaveMessageResponse.FromString,
                )
        self.NodeRemove = channel.unary_unary(
                '/Service/NodeRemove',
                request_serializer=chord__pb2.RemoveMessage.SerializeToString,
                response_deserializer=chord__pb2.RemoveMessageResponse.FromString,
                )
        self.NodeFind = channel.unary_unary(
                '/Service/NodeFind',
                request_serializer=chord__pb2.FindMessage.SerializeToString,
                response_deserializer=chord__pb2.FindMessageResponse.FromString,
                )


class ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegistryRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistryDeregister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistryGetChordInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistryPopulateFingerTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Identify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GiveDataToSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataFromSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeGetFingerTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeSave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeRemove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeFind(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegistryRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistryRegister,
                    request_deserializer=chord__pb2.RegisterMessage.FromString,
                    response_serializer=chord__pb2.RegisterMessageResponse.SerializeToString,
            ),
            'RegistryDeregister': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistryDeregister,
                    request_deserializer=chord__pb2.DeregisterMessage.FromString,
                    response_serializer=chord__pb2.DeregisterMessageResponse.SerializeToString,
            ),
            'RegistryGetChordInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistryGetChordInfo,
                    request_deserializer=chord__pb2.GetChordInfoMessage.FromString,
                    response_serializer=chord__pb2.GetChordInfoMessageResponse.SerializeToString,
            ),
            'RegistryPopulateFingerTable': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistryPopulateFingerTable,
                    request_deserializer=chord__pb2.PopulateFingerTableRegistryMessage.FromString,
                    response_serializer=chord__pb2.PopulateFingerTableRegistryMessageResponse.SerializeToString,
            ),
            'Identify': grpc.unary_unary_rpc_method_handler(
                    servicer.Identify,
                    request_deserializer=chord__pb2.IdentifyMessage.FromString,
                    response_serializer=chord__pb2.IdentifyMessageResponse.SerializeToString,
            ),
            'GiveDataToSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.GiveDataToSuccessor,
                    request_deserializer=chord__pb2.GiveDataToSuccessorMessage.FromString,
                    response_serializer=chord__pb2.GiveDataToSuccessorMessageResponse.SerializeToString,
            ),
            'GetDataFromSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataFromSuccessor,
                    request_deserializer=chord__pb2.GetDataFromSuccessorMessage.FromString,
                    response_serializer=chord__pb2.GetDataFromSuccessorMessageResponse.SerializeToString,
            ),
            'NodeGetFingerTable': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeGetFingerTable,
                    request_deserializer=chord__pb2.GetFingerTableMessage.FromString,
                    response_serializer=chord__pb2.GetFingerTableMessageResponse.SerializeToString,
            ),
            'NodeSave': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeSave,
                    request_deserializer=chord__pb2.SaveMessage.FromString,
                    response_serializer=chord__pb2.SaveMessageResponse.SerializeToString,
            ),
            'NodeRemove': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeRemove,
                    request_deserializer=chord__pb2.RemoveMessage.FromString,
                    response_serializer=chord__pb2.RemoveMessageResponse.SerializeToString,
            ),
            'NodeFind': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeFind,
                    request_deserializer=chord__pb2.FindMessage.FromString,
                    response_serializer=chord__pb2.FindMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegistryRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/RegistryRegister',
            chord__pb2.RegisterMessage.SerializeToString,
            chord__pb2.RegisterMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegistryDeregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/RegistryDeregister',
            chord__pb2.DeregisterMessage.SerializeToString,
            chord__pb2.DeregisterMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegistryGetChordInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/RegistryGetChordInfo',
            chord__pb2.GetChordInfoMessage.SerializeToString,
            chord__pb2.GetChordInfoMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegistryPopulateFingerTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/RegistryPopulateFingerTable',
            chord__pb2.PopulateFingerTableRegistryMessage.SerializeToString,
            chord__pb2.PopulateFingerTableRegistryMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Identify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/Identify',
            chord__pb2.IdentifyMessage.SerializeToString,
            chord__pb2.IdentifyMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GiveDataToSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/GiveDataToSuccessor',
            chord__pb2.GiveDataToSuccessorMessage.SerializeToString,
            chord__pb2.GiveDataToSuccessorMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataFromSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/GetDataFromSuccessor',
            chord__pb2.GetDataFromSuccessorMessage.SerializeToString,
            chord__pb2.GetDataFromSuccessorMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeGetFingerTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/NodeGetFingerTable',
            chord__pb2.GetFingerTableMessage.SerializeToString,
            chord__pb2.GetFingerTableMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeSave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/NodeSave',
            chord__pb2.SaveMessage.SerializeToString,
            chord__pb2.SaveMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeRemove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/NodeRemove',
            chord__pb2.RemoveMessage.SerializeToString,
            chord__pb2.RemoveMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeFind(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/NodeFind',
            chord__pb2.FindMessage.SerializeToString,
            chord__pb2.FindMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
