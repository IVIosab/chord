syntax = "proto3";


message IdentifyMessage{}
message IdentifyMessageResponse{
    string service = 1;
}
message GetInfoMessage{}
message GetInfoMessageResponse{
    repeated Node nodes = 1;
}
service RegistryService{
    rpc RegistryRegister(RegisterMessage) returns (RegisterMessageResponse);
    rpc RegistryDeregister(DeregisterMessage) returns (DeregisterMessageResponse);
    rpc RegistryGetChordInfo(GetChordInfoMessage) returns (GetChordInfoMessageResponse);
    rpc RegistryGetFingerTable(GetFingerTablFromRegistryMessage) returns (GetFingerTableFromRegistryMessageResponse);
    rpc RegistryGetPredecessor(GetPredecessorMessage) returns (GetPredecessorMessageResponse);
    rpc RegistryGetSuccessor(GetSuccessorMessage) returns (GetSuccessorMessageResponse);
    rpc Identify(IdentifyMessage) returns(IdentifyMessageResponse);
    rpc GetInfo(GetInfoMessage) returns(GetInfoMessageResponse);
}


//register
message RegisterMessage{
    string ipaddr = 1;
    string port = 2;
}
message RegisterMessageResponse{
    bool success = 1;
    int32 id = 2;
    int32 m = 3;
}

//deregister
message DeregisterMessage{
    int32 id = 1;
}
message DeregisterMessageResponse{
    bool success = 1;
    string message = 2;
}

//get_chord_info
message GetChordInfoMessage{}
message GetChordInfoMessageResponse{
    repeated Node nodes = 1;
}

message GetFingerTablFromRegistryMessage{
    int32 id = 1;
}
message GetFingerTableFromRegistryMessageResponse{
    int32 pred = 1;
    repeated Node nodes = 2;
}
message Node{
    int32 chord_id = 1;
    string chord_ip_address = 2;
}

message GetPredecessorMessage{
    int32 id = 1;
}
message  GetPredecessorMessageResponse{
    int32 pred = 1;
}


message GetSuccessorMessage{
    int32 id = 1;
}
message  GetSuccessorMessageResponse{
    int32 succ = 1;
}



service NodeService{
    rpc NodeGetFingerTable(GetFingerTableMessage) returns (GetFingerTableMessageResponse);
    rpc NodeSave(SaveMessage) returns (SaveMessageResponse);
    rpc NodeRemove(RemoveMessage) returns (RemoveMessageResponse);
    rpc NodeFind(FindMessage) returns (FindMessageResponse);
    rpc Identify(IdentifyMessage) returns(IdentifyMessageResponse);
    rpc GetInfo(GetInfoMessage) returns(GetInfoMessageResponse);


}

//get_finger_table
message GetFingerTableMessage{}
message GetFingerTableMessageResponse{
    repeated Node finger_table = 1;
}

//save
message SaveMessage{
    string key = 1;
    string text = 2; 
}
message SaveMessageResponse{
    bool success = 1;
    int32 id = 2;
    string message = 3;
}

//remove
message RemoveMessage{
    string key = 1;
}
message RemoveMessageResponse{
    bool success = 1;
    int32 id = 2;
    string message = 3;
}

//find
message FindMessage{
    string key = 1; 
}
message FindMessageResponse{
    bool success = 1;
    int32 id = 2;
    string message = 3;
    string ipaddr = 4;
    string port = 5;
}
