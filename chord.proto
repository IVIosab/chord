syntax = "proto3";


service Service{
    //Registry functions
    rpc RegistryRegister(RegisterMessage) returns (RegisterMessageResponse);
    rpc RegistryDeregister(DeregisterMessage) returns (DeregisterMessageResponse);
    rpc RegistryGetChordInfo(GetChordInfoMessage) returns (GetChordInfoMessageResponse);
    rpc RegistryPopulateFingerTable(PopulateFingerTableRegistryMessage) returns (PopulateFingerTableRegistryMessageResponse);
    
    //Node functions
    rpc NodeGetFingerTable(GetFingerTableMessage) returns (GetFingerTableMessageResponse);
    rpc NodeSave(SaveMessage) returns (SaveMessageResponse);
    rpc NodeRemove(RemoveMessage) returns (RemoveMessageResponse);
    
    //Utility function
    rpc Identify(IdentifyMessage) returns(IdentifyMessageResponse);
    rpc GiveDataToSuccessor(GiveDataToSuccessorMessage) returns(GiveDataToSuccessorMessageResponse); //Only in Node
    rpc GetDataFromSuccessor(GetDataFromSuccessorMessage) returns(GetDataFromSuccessorMessageResponse); //Only in Node
    rpc NodeFind(FindMessage) returns (FindMessageResponse);
}

//Registry Messages

//register(ipaddr, port) 
message RegisterMessage{
    string ipaddr = 1;
    string port = 2;
}
//{id: int, m: int}
message RegisterMessageResponse{
    bool success = 1;
    int32 id = 2;
    int32 m = 3;
}

//deregister(id)
message DeregisterMessage{
    int32 id = 1;
}
//{success: bool, message: string}
message DeregisterMessageResponse{
    bool success = 1;
    string message = 2;
}

//populate_finger_table(id)
message PopulateFingerTableRegistryMessage{
    int32 id = 1;
}
//{pred: int, nodes: Node}
message PopulateFingerTableRegistryMessageResponse{
    int32 pred = 1;
    repeated Node nodes = 2;
}

//get_chord_info()
message GetChordInfoMessage{}
//{nodes: Node}
message GetChordInfoMessageResponse{
    repeated Node nodes = 1;
}


//Node Messages

//get_finger_table()
message GetFingerTableMessage{}
//{nodes: Node}
message GetFingerTableMessageResponse{
    repeated Node nodes = 1;
}

//save(key, text)
message SaveMessage{
    string key = 1;
    string text = 2; 
}
//{success: bool, id: int, message: string}
message SaveMessageResponse{
    bool success = 1;
    int32 id = 2;
    string message = 3;
}

//remove(key)
message RemoveMessage{
    string key = 1;
}
//{success: bool, id: int, message: string}
message RemoveMessageResponse{
    bool success = 1;
    int32 id = 2;
    string message = 3;
}

//find(key)
message FindMessage{
    string key = 1; 
}
//{success: bool, id: int, message: string, ipaddr: string, port: string}
message FindMessageResponse{
    bool success = 1;
    int32 id = 2;
    string message = 3;
    string ipaddr = 4;
    string port = 5;
}


//Utility

//{first: int, second: string}
message Node{
    int32 first = 1;
    string second = 2;
}

//identify()
message IdentifyMessage{}
//{service: string} Node|Registry
message IdentifyMessageResponse{
    string service = 1;
}

//give_data_to_successor(keys, values)
message GiveDataToSuccessorMessage{
    repeated int32 keys = 1;
    repeated string values = 2;
}
//{success: bool}
message GiveDataToSuccessorMessageResponse{
    bool success = 1;
}

//get_data_from_successor(id)
message GetDataFromSuccessorMessage{
    int32 id = 1;
}
//{nodes: Node}
message GetDataFromSuccessorMessageResponse{
    repeated Node nodes = 1;
}